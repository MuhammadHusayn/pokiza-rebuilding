type Query {
	transports(
		transportId: ID
		search: String
		productId: ID
		orderId: ID
		staffId: ID
		branchId: [ID!]
		available: Boolean
		sort: TransportSort = {}
		pagination: Pagination = {} 
	): [Transport!]!

	deletedTransports(
		transportId: ID
		search: String
		productId: ID
		orderId: ID
		staffId: ID
		branchId: [ID!]
		available: Boolean
		sort: TransportSort = {}
		pagination: Pagination = {} 
	): [Transport!]!
}

type Mutation {
	addTransport(
		file: Upload
		branchId: ID!
		transportModel: String!
		transportColor: String!
		transportNumber: String!
		transportSummary: String
	): MutationResponse!

	changeTransport(
		transportId: ID!
		file: Upload
		branchId: ID
		transportModel: String
		transportColor: String
		transportNumber: String
		transportSummary: String
	): MutationResponse!

	deleteTransport(transportId: [ID!]!): MutationResponses!
	restoreTransport(transportId: [ID!]!): MutationResponses!

	bindOrder(
		transportId: ID!
		orderId: [ID!]
		productId: [ID!]
		type: BindType!
	): MutationResponses!

	unbindOrder(
		orderId: [ID!]
		productId: [ID!]
	): MutationResponses!

	registerTransport(staffId: ID! transportId: ID!): MutationResponse!
	unregisterTransport(transportId: ID!): MutationResponse!
}

type Transport {
	transportId: ID!
	transportImg: Link!
	transportModel: String!
	transportColor: String!
	transportNumber: String!
	transportSummary: String
	transportBroken: Boolean!
	transportCreatedAt: DateTime!
	transportRegistered: Boolean!
	transportOrderLoaded: Boolean!
	driversList: [Driver!]
	driver: Driver
	branch: Branch!
	count: Int
}

type Driver {
	staff: Staff!
	registeredAt: DateTime!
	unRegisteredAt: DateTime
}

input TransportSort {
	transportId: SortOptions
}
