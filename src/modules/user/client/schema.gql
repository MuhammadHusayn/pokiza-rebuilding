type Query {
	clients(
		clientId: ID
		search: String
		socialSetId: [ID!]
		clientStatus: [Int!]
		sort: UserSort = {}
		pagination: Pagination = {} 
		addressFilter: AddressFilter = {}
		userInfoFilter: UserInfoFilter = {}
	): [Client!]!

	deletedClients(
		clientId: ID
		search: String
		socialSetId: [ID!]
		clientStatus: [Int!]
		sort: UserSort = {}
		pagination: Pagination = {} 
		addressFilter: AddressFilter = {}
		userInfoFilter: UserInfoFilter = {}
	): [Client!]!
}

type Mutation {
	addClient(
		mainContact: Contact!
		socialSetId: ID!
		clientStatus: Int
		clientSummary: String
		userInfo: UserInfoInput! 
		userAddress: AddressInput!
	): MutationResponse!

	changeClient(
		clientId: ID
		clientStatus: Int
		clientSummary: String
		userInfo: UserInfoInput = {}
		userAddress: AddressInput = {}
	): MutationResponse!

	deleteClient(clientId: [ID!]): MutationResponses!
	restoreClient(clientId: [ID!]): MutationResponses!
	
	enterClientPhone(mainContact: Contact!): AuthResponseWithoutType!
	enterClientPassword(password: Code!): AuthResponse!
	fillClientData(
		socialSetId: ID!
		clientStatus: Int
		clientSummary: String
		userInfo: UserInfoInput!
		userAddress: AddressInput!
	): AuthResponse!
}

type Client {
	clientId: ID!
	count: Int!
	clientStatus: Int!
	userInfo: UserInfo!
	clientSummary: String
	socialSet: SocialSet!
	clientCreatedAt: DateTime!
}